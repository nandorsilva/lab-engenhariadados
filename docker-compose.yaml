# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
version: '2.4'
services:
 

  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
     - "2181:2181"
    container_name: zookeeper
    networks:
      otel:

  kafka-broker:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9991:9991"

    container_name: kafka-broker
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_JMX_PORT: 9991
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: ${KAFKA_BROKER_HEAP_OPTS}
    mem_limit: ${KAFKA_BROKER_MEM_LIMIT}
    networks:
      otel:


  akhq:
    image: tchiotludo/akhq:${AKHQ_VERSION}
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka-broker:29092"       
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - "8080:8080"
    depends_on:
      - kafka-broker    
      - connect
    networks:
      otel:

  
  connect:
        image: daniellab/kafka-connet-lab:v1
        container_name: kafkaConect
        ports:
        - 8083:8083
        depends_on:      
         - kafka-broker      
        environment:
        - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
        - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka-broker:29092
        - |
            KAFKA_CONNECT_CONFIGURATION=
            key.converter=org.apache.kafka.connect.json.JsonConverter
            value.converter=org.apache.kafka.connect.json.JsonConverter
            key.converter.schemas.enable=false
            value.converter.schemas.enable=false
            group.id=connect
            offset.storage.topic=connect-offsets
            offset.storage.replication.factor=1
            config.storage.topic=connect-configs
            config.storage.replication.factor=1
            status.storage.topic=connect-status
            status.storage.replication.factor=1  
            CONNECT_REST_ADVERTISED_HOST_NAME: 'connect'  
            producer.interceptor.classes=io.debezium.tracing.DebeziumTracingProducerInterceptor  
       
        command: /opt/kafka/kafka_connect_run.sh
        networks:
          otel:

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: lab-pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: postgres    
    ports:
      - "5433:80"
    depends_on:
      - postgres    
    networks:
      otel:

  

  minio:
    image:  quay.io/minio/minio
    entrypoint: sh
    command:   '-c ''mkdir -p /minio_data/raw && mkdir -p /minio_data/trusted && minio server /minio_data --console-address ":9001"'''
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: cursolab
      MINIO_SECRET_KEY: cursolab
    volumes:
      - ./minio/data1:/minio_data
    networks:
      otel:
      
      
  namenode:
    image: fjardim/mds-namenode
    container_name: namenode
    hostname: namenode
    volumes:
      - ./hadoop/hdfs/namenode:/hadoop/dfs/name
      - ./hadoop/util:/util
    env_file:
      - ./hadoop/hadoop.env
    ports:
      - "9870:9870"
    deploy:
      resources:
        limits:
          memory: 500m
    networks:
       otel:
    #Se entrar em mode de seguran√ßa, acessar a vm e rodar o "hdfs dfsadmin -safemode leave" e depois "hdfs fsck -delete" 

       
  datanode:
    image: fjardim/mds-datanode
    container_name: datanode
    hostname: datanode
    volumes:
      - ./hadoop/hdfs/datanode:/hadoop/dfs/data
      - ./hadoop/util:/util
    env_file:
      - ./hadoop/hadoop.env
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    depends_on:
      - namenode
    ports:
      - "9864:9864"
    deploy:
      resources:
        limits:
          memory: 500m
    networks:
       otel:

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:${KSQLDB_VER}
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka-broker        
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka-broker:29092      
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"        

    networks:
      otel: 
 
  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:${KSQLDB_VER}
    container_name: ksqldb-cli
    depends_on:
      - kafka-broker
      - ksqldb-server
    volumes:
      - ./scripts:/scripts
    entrypoint: /bin/sh
    tty: true
    networks:
      otel:
  
  postgres: 
    image: fia_postgres_alpine18
    container_name: postgres
    hostname: postgres
    
    build:
      context: ./api/postgres
      dockerfile: Dockerfile
    ports:   
      - "5435:5432"
    volumes:
      - ./postgresql/volume:/var/lib/postgresql/data
      - ./util:/util
    environment:   
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=admin
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200 -c wal_level=logical
    networks:
      otel:
      
  api:
      image: fia_fastapi
      build:
        context: ./api     
        dockerfile: Dockerfile
      ports:
        - "8000:8000"   
      container_name:  fast-api-fia 
      volumes:
        - ./api:/home/app/api   
      environment:
        - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/admin
        - BOOSTRAP_SERVER_KAFKA=kafka-broker:29092
      stdin_open: true
      tty: true 
      networks:
       otel:
       
  hive:
    hostname: hive
    #image: apache/hive:4.0.0-beta-1
    image: fjardim/mds-hive
    container_name: hive
    environment:
      AWS_ACCESS_KEY_ID: cursolab
      AWS_SECRET_ACCESS_KEY: cursolab
      HIVE_CUSTOM_CONF_DIR: "/hive_custom_conf"
      SERVICE_NAME: hiveserver2
      SERVICE_OPTS: "-Dhive.metastore.uris=thrift://metastore:9083" 
      IS_RESUME: "true"
      #HIVE_VERSION: "3.1.3"
    ports:
       - "10000:10000"
       - "10002:10002"
    depends_on:
      - metastore
    user: root
    volumes:
       - ./hive/conf:/hive_custom_conf
       - ./util:/util
    networks:
       otel:
          
  metastore:
    hostname: metastore
    image: fjardim/mds-hive-metastore
    #image: apache/hive:4.0.0-beta-1
    container_name: metastore
    environment:
      AWS_ACCESS_KEY_ID: cursolab
      AWS_SECRET_ACCESS_KEY: cursolab
      HIVE_CUSTOM_CONF_DIR: "/hive_custom_conf"
      SERVICE_NAME: metastore
      #SERVICE_OPTS: "-Dhive.metastore.uris=thrift://metastore:9083" 
      IS_RESUME: "true"
      DB_DRIVER: postgres 
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres:5432/metastore -Djavax.jdo.option.ConnectionUserName=admin -Djavax.jdo.option.ConnectionPassword=admin" 
    ports:
       - "9083:9083"
    depends_on:
        - postgres
          
    user: root
    volumes:
       - ./hive/meta:/opt/hive/data/warehouse 
       - ./hive/conf:/hive_custom_conf
       - ./util:/util
    networks:
       otel:
       
  presto:
    platform: linux/amd64
    image: prestodb/presto
    hostname: presto
    container_name: presto
    volumes: 
      - ./presto/etc/catalog:/opt/presto-server/etc/catalog/
      - ./presto/etc/catalog:/opt/presto/etc/catalog/
      - ./presto/etc/catalog:/etc/catalog/ 
      - ./presto/etc/hadoop:/hadoop 
      - ./util:/util
    ports:
      - 18080:8080
    depends_on:
      - hive

    deploy:
      resources:
        limits:
          memory: 2g
          #cpus: '0.2'
    networks:
       otel:
       
  metabase:
      image: metabase/metabase:latest
      container_name: metabase
      hostname: metabase
      ports:
        - 3000:3000
      depends_on:
        - postgres
          #condition: service_healthy
      environment:
        MB_DB_TYPE: postgres
        MB_DB_DBNAME: metabase
        MB_DB_PORT: 5432
        MB_DB_PASS: admin
        MB_DB_USER: admin
        MB_DB_HOST: postgres
        MB_PASSWORD_COMPLEXITY: "weak"
        MB_PASSWORD_LENGTH: 4
        #user userlab@fiadatalab.com.br pass datalab
      volumes:
        - ./util:/util
      networks:
        otel:
############################
## INGESTAO
############################

  nifi:
      image: apache/nifi:latest
      container_name: nifi
      hostname: nifi
      volumes:
        - ./nifi/util:/util
        - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
        - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
        - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
        - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
        - ./nifi/state:/opt/nifi/nifi-current/state
        - ./nifi/conf:/opt/nifi/nifi-current/conf
        - ./util:/util
      environment:
        NIFI_WEB_HTTP_PORT: "9090"
        NIFI_WEB_HTTPS_HOST: "nifi"
        TZ: "America/Sao_Paulo"
      command: >
        sh -c "ln -snf /usr/share/zoneinfo/$$TZ /etc/localtime && echo $$TZ > /etc/timezone"
      
      ports:
        - 49090:9090
      deploy:
        resources:
          limits:
            memory: 2g
            #cpus: '0.2'
      networks:
        otel:


networks:
  otel:

volumes:
  minio_storage: {}
  loki:
  prometheus:
  tempo:
  grafana-data: